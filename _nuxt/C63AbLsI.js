import{y as h,f as c,z as u,v as p}from"#entry";const l=h("shop",{state:()=>({packages:[{id:"coin_pack_100",name:"100 Coins",coins:100,price:.99,currency:"EUR",description:"Perfect starter pack"},{id:"coin_pack_1000",name:"1000 Coins",coins:1e3,price:4.99,currency:"EUR",popular:!0,description:"Most popular choice"},{id:"coin_pack_5000",name:"5000 Coins",coins:5e3,price:19.99,currency:"EUR",description:"Best value pack"},{id:"coin_pack_10000",name:"10000 Coins",coins:1e4,price:34.99,currency:"EUR",description:"Ultimate coin pack"}],transactions:[],loading:!1,processingPayment:!1}),getters:{getPackageById:t=>e=>t.packages.find(r=>r.id===e),popularPackage:t=>t.packages.find(e=>e.popular),recentTransactions:t=>t.transactions.filter(e=>e.type==="purchase").sort((e,r)=>new Date(r.created_at).getTime()-new Date(e.created_at).getTime()).slice(0,5)},actions:{async fetchTransactions(){const t=c();if(t.user){this.loading=!0;try{const e=u(),{data:r,error:s}=await e.from("transactions").select("*").eq("user_id",t.user.id).order("created_at",{ascending:!1});if(s)throw s;this.transactions=r||[]}catch(e){console.error("Error fetching transactions:",e)}finally{this.loading=!1}}},async createPaymentSession(t,e="stripe"){if(!c().user)throw new Error("User must be authenticated");if(!this.getPackageById(t))throw new Error("Invalid package ID");this.processingPayment=!0;try{const a=u(),{data:{session:i}}=await a.auth.getSession();if(!i)throw new Error("No active session");const{data:o,error:n}=await a.functions.invoke("create-checkout",{body:{packageId:t,provider:e},headers:{Authorization:`Bearer ${i.access_token}`}});if(n)throw console.error("Supabase function error:",n),new Error(n.message||"Failed to create checkout session");return e==="stripe"&&o?.checkoutUrl&&await p(o.checkoutUrl,{external:!0}),o}catch(a){throw console.error("Error creating payment session:",a),a}finally{this.processingPayment=!1}},async handlePaymentSuccess(t){try{return await c().refreshUser(),await this.fetchTransactions(),{success:!0,sessionId:t}}catch(e){throw console.error("Error handling payment success:",e),e}},setLoading(t){this.loading=t},setProcessingPayment(t){this.processingPayment=t}}});export{l as u};
